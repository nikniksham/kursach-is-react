import React, {useEffect} from "react";
import {useState} from "react"
import {Link, useNavigate, useParams} from "react-router-dom";
import Layout from "./Layout";
import {getCookie} from "../components/MyCookie";

export default function ExploreOrderModer() {
    const [order, setOrder] = useState(null);
    const [message, setMessage] = useState(false);
    const [error, setError] = useState(null);
    const [whyNot, setWhyNot] = useState("");

    const {order_id} = useParams();

    let token = getCookie("token")
    const navigate = useNavigate();

    const statusi = {
        1: "üïò",
        2: "‚ùå",
        3: "üë∑‚Äç",
        4: "üõ†",
        5: "‚ùì",
        6: "‚úÖ",
        7: "üóë",
    }

    useEffect(() => {
        if (token == null) {
            navigate("/login")
        }
        fetchOrder()
        getComment()
    }, [navigate, token])

    const fetchOrder = async () => {
        try {
            let token = getCookie("token");
            const response = await fetch("http://localhost:8080/api/moder/orders/getById?order_id=" + order_id, {
                method: "GET",
                headers: {Authorization: `Bearer ${token}`}
            });
            const data = await response.json();
            // console.log(data)
            setOrder(data)
        } catch (error) {
            setError(error.message);
        }
    };

    const getComment = async () => {
        try {
            let token = getCookie("token");
            const response = await fetch("http://localhost:8080/api/moder/comment/getById?order_id=" + order_id, {
                method: "GET",
                headers: {Authorization: `Bearer ${token}`}
            });
            const data = await response.json();
            setWhyNot(data.text)
            // setApplication(data)
        } catch (error) {
            // setError(error.message);
        }
    };

    const rejectOrder = async () => {
        try {
            if (whyNot.length > 4096) {
                throw new Error("–î–ª–∏–Ω–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 4096 —Å–∏–º–≤–æ–ª–∞")
            }
            let token = getCookie("token");
            const response = await fetch("http://localhost:8080/api/moder/orders/reject?order_id=" + order_id + "&why_not=" + whyNot, {
                method: "POST",
                headers: {Authorization: `Bearer ${token}`}
            });
            const data = await response.text();
            setMessage(data)
        } catch (error) {
            setError(error.message);
        }
    };

    const approveOrder = async () => {
        try {
            let token = getCookie("token");
            const response = await fetch("http://localhost:8080/api/moder/orders/approve?order_id=" + order_id, {
                method: "POST",
                headers: {Authorization: `Bearer ${token}`}
            });
            const data = await response.text();
            setMessage(data)
        } catch (error) {
            setError(error.message);
        }
    };

    const makeOrderOk = async () => {
        try {
            let token = getCookie("token");
            const response = await fetch("http://localhost:8080/api/moder/orders/makeOk?order_id=" + order_id + "&why_not=" + whyNot, {
                method: "POST",
                headers: {Authorization: `Bearer ${token}`}
            });
            const data = await response.text();
            setMessage(data)
        } catch (error) {
            setError(error.message);
        }
    };

    const makeOrderBad = async () => {
        try {
            let token = getCookie("token");
            const response = await fetch("http://localhost:8080/api/moder/orders/makeBad?order_id=" + order_id, {
                method: "POST",
                headers: {Authorization: `Bearer ${token}`}
            });
            const data = await response.text();
            setMessage(data)
        } catch (error) {
            setError(error.message);
        }
    };

    return (
        <Layout>
            <div className="p-4">
                {order != null ? (
                    <h1>–ó–∞–∫–∞–∑ # {order.id}</h1>
                ) : null}
                <Link to="/getAllOrdersModer" className="text-blue-500 underline">
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ó–∞–∫–∞–∑–æ–≤
                </Link><br/>

                {order != null ? (
                    <div>
                        <p>–ü—Ä–æ—Å—è—â–∏–π: {order.user.login}</p>
                        <p>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.statusOrders.status + " " + statusi[order.statusOrders.id]}</p>
                        <p>–ù–æ–º–µ—Ä –∏—Å—É —Ü–µ–ª–∏: {order.target_isu_num}</p>
                        <p>–ò–º—è —Ü–µ–ª–∏: {order.target_name}</p>
                        <p>–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: {order.description}</p>
                        {[1, 2].includes(order.statusOrders.id) ? (
                            <div>
                                <textarea placeholder="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:" value={whyNot}
                                          onChange={(e) => setWhyNot(e.target.value)}/>
                                <button onClick={rejectOrder}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                                <button onClick={approveOrder}>–ü—Ä–∏–Ω—è—Ç—å</button>
                            </div>
                        ) : null}
                        {[5].includes(order.statusOrders.id) ? (
                            <div>
                                <button onClick={makeOrderOk}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ</button>
                                <button onClick={makeOrderBad}>–û—Ç–∫–∞–∑–∞—Ç—å ‚ùå</button>
                            </div>
                        ) : null}
                    </div>
                ) : null
                }
                {error && <p className="text-red-500 mt-2">–û—à–∏–±–∫–∞: {error}</p>}
                {message && <p className="mt-2 text-red-500">{message}</p>}


            </div>
        </Layout>
    );
}